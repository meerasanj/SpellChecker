Problem Description: 

The Spell Checker Algorithm aims to read an input file (in this case, myFile.txt), identify misspelled words that are not in the dictionary file (dict.txt), and provide a menu of options in which the user can choose a choice. My algorithm utilizes various data structures such as hash tables, a binary search tree, and a vector for efficient word storage and retrieval. 

Relationship between Classes: 

In the client file, the HashTable and BinarySearchTree classes are utilized to facilitate spell checking and storage of misspelled words efficiently. 

The HashTable class provides a data structure for efficient storage and retrieval of key-value pairs, where keys are hashed to unique indices in an array. I used hash tables to store the dictionary as well as words the user wants to ignore. The .find() and .insert() methods from the HashTable class were used to quickly access words or to check their presence in the dictionary or the list of ignored words. In the spellCheckFile function, words from the input file are compared against the words stored in the hash table to determine if they are valid dictionary words or should be ignored. 

The BinarySearchTree class implements an unbalanced binary search tree data structure for efficient storage and retrieval of comparable elements. Each node in the tree contains an element and pointers to its left and right children. The BST class supports operations such as insertion, removal, searching for the smallest and largest items, printing the tree in sorted order, and making the tree logically empty.  The BinaryNode class is a friend class to BinarySearchTree, meaning it can access private members. In my client file, I used the BST class to maintain a sorted collection of misspelled words along with their corresponding line numbers. Instances of the BinaryNode class represent individual nodes in the BST, each containing an element (word from the text file) along with pointers to its left and right children. The BNode struct, which is essentially an instance of BinaryNode, encapsulates a word and its corresponding line number from the input file. This struct is used to construct the BST where each node represents a potentially misspelled word. In the processMisspelledWord function, misspelled words are inserted into the binary search tree along with their line numbers. This allows for efficient searching and retrieval of misspelled words in sorted order when generating suggestions or outputting them to a file.

Client Algorithm: 

Overview - The client algorithm is as an interactive spell checker that is designed to process a text file, identify misspelled words, and provide various options for handling them. Upon execution, the program reads a list of words from a dictionary file and stores these words in a HashTable named dictionary. If the file does not exist, the program just starts with an empty dictionary HashTable. It then initializes the necessary data structures, including a hash table for storing dictionary words and one for ignored words, as well as a BST for tracking misspelled words. Then, the source/input file is spell-checked. The program reads each line of the input file, tokenizes it into words, and checks each word against the dictionary hash table. When a word is encountered that is not in the dictionary HashTable or the ignoredWords HashTable, the user is prompted with menu options. The word is then considered misspelled and added to the BST along with its line number. The menu options include: A) Add the Word To Dictionary, I) Ignore Word, and Skip Future References, G) Go On To Next Word, S) Search For A Suggested Spelling, and Q) Quit Spell Checking File. After processing the entire file, the program outputs the list of misspelled words to a file named "notfound.txt" and notifies the user that the spell checking process is complete.

Implementation of Menu Selections - The menu selection in the spell checker algorithm is implemented using if-else statements to handle each possible user choice. For instance, selecting "A) Add the Word to Dictionary" inserts the word into the dictionary hash table and updates the dictionary file accordingly, while selecting "I) Ignore Word" adds the word to the ignored words hash table, ensuring it is not flagged as misspelled in future checks. Words will only be processed if they are not in the dictionary HashTable or the ignoredWords HashTable. If the user chooses option “G) Go On To Next Word”, the program simply continues with the spell checking process without taking any further action on the current word. If the user selects “S) Search For A Suggested Spelling,” the program generates a list of spelling suggestions for the misspelled word. Each suggestion is checked against the dictionary hash table to determine its validity. If valid suggestions are found, they are displayed to the user. In the event that no valid suggestions are found, a message is displayed indicating that no suggested spellings were found in the dictionary. Additionally, if the user chooses “Q) Quit Spell Checking File”, the program will end. 

Implementation of Search for Spelling Suggestions - I used a vector of data type strings to store spelling suggestions. When a user selects the "S) Search for a Suggested Spelling" option from the menu, the generateSuggestions method creates a list of potential corrections based on various transformations of the misspelled word and if this transformation is present in the dictionary HashTable. These transformations include swapping adjacent characters, adding one character, removing one character, or replacing a character by utilizing a temporary string.  First, the generateSuggestions method attempts to swap adjacent characters in the word to identify potential correct spellings. Next, the method tries adding one character at different positions within the word. It iterates over each character of the alphabet and inserts it at every possible position in the word. Similarly, the method also tries removes one character at a time from the misspelled word, checking if the resulting word exists in the dictionary hash table. Finally, the method attempts to replace each character in the misspelled word with every letter of the alphabet. Each suggested spelling is checked against the dictionary hash table to determine if it is a valid word. If valid suggestions are found, they are added to the suggestions vector and presented to the user. If no valid suggestions are found, the user is notified that no suggested spellings were found in dictionary.

