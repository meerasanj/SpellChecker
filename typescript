Script started on Mon 01 Apr 2024 03:52:52 PM EDT
]0;sanjeevirao_mp@cobra:~/CSC245/Prog3[?1034h[sanjeevirao_mp@cobra Prog3]$ cat spellCheck.cpp
#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <algorithm>
#include <sstream>
using namespace std;
#include "HashTable.h"
#include "BinarySearchTree.h"

// define binary node for client file (given by dr. digh)
struct BNode {
	string word;
	int lineNum;
	bool operator < (BNode otherStruct) const {
		return ( word < otherStruct.word );
	}
};
typedef BinarySearchTree<BNode> BST;
ostream & operator << (ostream & out, BNode & temp) {
	out << temp.word << " " << temp.lineNum;
	return out;
}

// function prototypes
string cleanWord(const string &word);
void spellCheckFile(ifstream &inFile, HashTable &dictionary, HashTable &ignoredWords, BST &wordsNotFound);
void processMisspelledWord(const string &word, const string &cleanedWord, int lineNumber, HashTable &dictionary, HashTable &ignoredWords, BST &wordsNotFound);
vector<string> generateSuggestions(const string &cleanedWord, HashTable &dictionary);
void displayMenu(const string &word, int lineNumber);
void outputMisspelledWords(BST &wordsNotFound);

// main method 
int main(int argc, char *argv[]) {	
	// initialize data structures
	HashTable dictionary(500); // store dictionary (dict.txt)
	HashTable ignoredWords(100); // store words to be ignored 
	BNode defaultNode; 
	BST wordsNotFound(defaultNode);
		
	// load words into dictionary hash table
	ifstream dictFile("dict.txt");
	if(dictFile) {
		string word;
		while(dictFile >> word) {
			dictionary.insert(word);
		}
		dictFile.close();
	} else {
		cout << "Dictionary file not found. Starting with an empty dictionary.\n";
	}
	
	ifstream inputFile(argv[1]);
	if (!inputFile.is_open()) {
		cerr << "Error: Unable to open source file.\n";
		return 1;
	}

	spellCheckFile(inputFile, dictionary, ignoredWords, wordsNotFound);		
	outputMisspelledWords(wordsNotFound);

	cout << "Spell checking complete. Misspelled words have been processed.\n";

	return 0;
}

// method to spell check the input file 
void spellCheckFile(ifstream &inFile, HashTable &dictionary, HashTable &ignoredWords, BST &wordsNotFound) {
	string line;
	int lineNumber = 1;
	while(getline(inFile, line)) { // reads each line from file 
		stringstream ss(line);
		string word;
		while(ss >> word) {
			string cleanedWord = cleanWord(word);
			if (!cleanedWord.empty() && !dictionary.find(cleanedWord) && !ignoredWords.find(cleanedWord)) {
				BNode bN = {cleanedWord, lineNumber};
				wordsNotFound.insert(bN);
				processMisspelledWord(word, cleanedWord, lineNumber, dictionary, ignoredWords, wordsNotFound);
			}
		}
		lineNumber++;
	}
	inFile.close();
}

// method to display menu for word options 
void displayMenu(const string& word, int lineNumber) {
	cout << "\n!@#$%^&*(){} THE SPELL CHECKER PROGRAM !@#$%^&*(){}\n" << endl;
	cout << word << " On Line " << lineNumber << " Was Not Found In Dictionary\n" << endl;	
	cout << "A) Add the Word To Dictionary\n";
	cout << "I) Ignore Word, and Skip Future References\n";
	cout << "G) Go On To Next Word\n";
	cout << "S) Search For A Suggested Spelling\n";
	cout << "Q) Quit Spell Checking File\n" << endl;
	cout << "Selection: ";
}

// method to process misspelled word based on user choices 
void processMisspelledWord(const string &word, const string &cleanedWord, int lineNumber, HashTable &dictionary, HashTable &ignoredWords, BST &wordsNotFound) {
	char choice; 
	displayMenu(word, lineNumber);
	cin >> choice;
	cin.ignore();
	choice = tolower(choice);
	if(choice == 'a') { // add word to dictionary file 
		dictionary.insert(cleanedWord);
		ofstream dictOut("dict.txt", ios::app); // use of ios::app from https://cplusplus.com/reference/ios/ios_base/openmode/#google_vignette
		dictOut << cleanedWord << endl;
		dictOut.close();
		cout << endl;
		cout << cleanedWord << " was added to the dictionary!" << endl;
	} else if(choice == 'i') { // ignore word and skip future references
		ignoredWords.insert(cleanedWord);
		cout << "\nAll future references of " << cleanedWord << " will be skipped." << endl;
	} else if(choice == 'g') {  // go to next word
		return;
	} else if(choice == 's') { // spelling suggestions
		// create vector of string type to hold suggestions  
		vector<string> suggestions = generateSuggestions(cleanedWord, dictionary);
		if(!suggestions.empty()) {
			cout << "\nSuggested Spelling(s) : ";
			for(int i = 0; i < suggestions.size(); ++i) {
				cout << suggestions[i] << "   ";
			}
			cout << endl;
		} else {
			cout << "\nNo suggested spellings were found in dictionary." << endl;
		}
		cout << "\nPlease Hit Return to Continue..." << endl;		
		cin.get();
	} else if(choice == 'q') { // quit spell checking
		cout << "Now Exiting Program...\n";
		outputMisspelledWords(wordsNotFound);
		exit(0);
	} else {
		cout << "\nInvalid Choice -- Please Hit Return to Continue." << endl;
		cin.get();
	}	

}

// method to generate spelling suggestions for a word 
vector<string> generateSuggestions(const string &cleanedWord, HashTable &dictionary) {
	vector<string> suggestions; // create vector to store spelling suggestions
	string temp;
	// swapping adjacent characters
	for (size_t i = 0; i < cleanedWord.length() - 1; ++i) {
		temp = cleanedWord;
		swap(temp[i], temp[i + 1]);
		bool found = dictionary.find(temp);
		if (found) {
			suggestions.push_back(temp);
		}
	}

	// adding one character
	for (size_t i = 0; i <= cleanedWord.length(); ++i) {
		for (char c = 'a'; c <= 'z'; ++c) {
			temp = cleanedWord;
			temp.insert(i, 1, c);
			if (dictionary.find(temp)) {
				suggestions.push_back(temp);
			}
		}
	}

	// removing one character
	for (size_t i = 0; i < cleanedWord.length(); ++i) {
		temp = cleanedWord;
		temp.erase(i, 1);
		if (dictionary.find(temp)) {
			suggestions.push_back(temp);
		}
	}

	// replacing one character
	for (size_t i = 0; i < cleanedWord.length(); ++i) {
		for (char c = 'a'; c <= 'z'; ++c) {
			temp = cleanedWord;
			temp[i] = c;
			if (dictionary.find(temp)) {
				suggestions.push_back(temp);
			}
		}
	}						

	return suggestions;
}

// method to clean word, removes non-letters
string cleanWord(const string &word) {
	string cleanedWord;
	for (int i = 0; i < word.length(); ++i) {
		if(isalpha(word[i])) {
			cleanedWord += tolower(word[i]);
		}
	}
	return cleanedWord;
} 

// method to output all words not found in dictionary to external file 
void outputMisspelledWords(BST &wordsNotFound) {
	ofstream notfoundOut("notfound.txt");
	if (!(wordsNotFound.isEmpty())) {
		wordsNotFound.printTree(notfoundOut);
	}
	notfoundOut.close();
}
]0;sanjeevirao_mp@cobra:~/CSC245/Prog3[sanjeevirao_mp@cobra Prog3]$ c++ spellCheck.cpp
]0;sanjeevirao_mp@cobra:~/CSC245/Prog3[sanjeevirao_mp@cobra Prog3]$ ./a.out myFike[K[Kle.txt

!@#$%^&*(){} THE SPELL CHECKER PROGRAM !@#$%^&*(){}

Thsi On Line 4 Was Not Found In Dictionary

A) Add the Word To Dictionary
I) Ignore Word, and Skip Future References
G) Go On To Next Word
S) Search For A Suggested Spelling
Q) Quit Spell Checking File

Selection: I

All future references of thsi will be skipped.

!@#$%^&*(){} THE SPELL CHECKER PROGRAM !@#$%^&*(){}

fiel On Line 4 Was Not Found In Dictionary

A) Add the Word To Dictionary
I) Ignore Word, and Skip Future References
G) Go On To Next Word
S) Search For A Suggested Spelling
Q) Quit Spell Checking File

Selection: S

Suggested Spelling(s) : file   fill   

Please Hit Return to Continue...


!@#$%^&*(){} THE SPELL CHECKER PROGRAM !@#$%^&*(){}

soem On Line 4 Was Not Found In Dictionary

A) Add the Word To Dictionary
I) Ignore Word, and Skip Future References
G) Go On To Next Word
S) Search For A Suggested Spelling
Q) Quit Spell Checking File

Selection: G

!@#$%^&*(){} THE SPELL CHECKER PROGRAM !@#$%^&*(){}

spelling On Line 4 Was Not Found In Dictionary

A) Add the Word To Dictionary
I) Ignore Word, and Skip Future References
G) Go On To Next Word
S) Search For A Suggested Spelling
Q) Quit Spell Checking File

Selection: A

spelling was added to the dictionary!

!@#$%^&*(){} THE SPELL CHECKER PROGRAM !@#$%^&*(){}

tiem On Line 6 Was Not Found In Dictionary

A) Add the Word To Dictionary
I) Ignore Word, and Skip Future References
G) Go On To Next Word
S) Search For A Suggested Spelling
Q) Quit Spell Checking File

Selection: Q
Now Exiting Program...
]0;sanjeevirao_mp@cobra:~/CSC245/Prog3[sanjeevirao_mp@cobra Prog3]$ v[Kcat notfound.txt
fiel 4
soem 4
spelling 4
thsi 4
tiem 6
]0;sanjeevirao_mp@cobra:~/CSC245/Prog3[sanjeevirao_mp@cobra Prog3]$ cat dict.txt
at
anonymous
a
already
along
after
adjustments
adapter
about
access
accept
actually
adjust
adapters
address
add
additional
advised
almost
all
aims
and
an
also
alternatives
anything
any
answer
as
anywhere
appear
are
append
april
applies
around
assumes
be
attempt
attached
attention
available
base
based
behave
beginning
begin
becoming
before
been
bug
brick
boot
blue
both
boots
by
but
build
built
building
bus
button
header
disk
detected
channel
cannot
can
cable
cables
called
cant
changes
certain
capacity
cdrom
card
cartridges
careful
case
certainly
chained
chain
check
design
current
copy
converters
command
coexist
clause
choose
choice
collected
comes
come
constant
components
complex
compile
compatible
configured
configuration
computers
console
connects
conjunction
confusing
configuring
conflict
connected
connect
connector
connecting
connectors
contain
contributions
contained
controller
critical
course
couple
correspond
could
correspondingly
depends
defaults
currently
data
cylinders
default
day
describes
device
dip
devices
discussion
disappear
driver
diverted
display
disks
distributions
displayed
drive
do
documented
documentation
document
dont
does
door
drives
gives
find
easily
drivers
drives
each
else
eject
effect
finally
enabled
every
even
errors
ends
enables
enclosure
enhancements
file
example
exactly
except
existing
fast
family
expect
familiar
extreme
external
features
few
female
fetch
fill
files
get
for
following
firmly
floppy
flag
from
found
forget
force
gear
front
gaps
have
has
grant
go
hardware
host
here
help
high
hold
holding
macintosh
id
i
how
identically
introduction
information
if
identifying
identify
in
important
included
include
incorporates
into
install
insert
internal
interim
intended
instructions
installation
instance
installed
interface
introduced
look
is
kernels
kernel
it
its
itself
jumpers
like
last
large
less
lightweight
log
locks
locked
likely
loadable
line
limited
load
list
loaded
loops
lowlevel
low
make
main
major
many
male
may
markets
sectors
section
screens
mode
messages
megabytes
menu
might
method
missing
modes
model
revision
retrieve
name
must
module
most
more
modules
months
on
need
of
not
net
next
new
nice
normally
no
none
numbers
number
note
now
obtained
often
port
parts
only
once
one
parallel
otherwise
or
others
other
oriented
part
parameter
parameters
partly
particular
pin
pieces
physically
paul
pay
please
plastic
point
popular
pressed
powerful
powered
possible
ports
portable
report
relevant
released
reboot
read
quite
question
published
printer
provide
protocol
process
proprietary
recent
removed
remember
removable
responsibility
required
resembling
same
sample
screen
sector
torque
the
send
selects
select
seen
see
should
sequential
several
set
setup
shipped
someone
some
slower
similar
shutdown
since
simultaneous
small
software
something
subdirectory
speed
somewhat
soon
specific
source
special
specified
starting
stable
start
standard
step
style
study
such
system
syntax
summary
supplied
switches
support
sure
supports
switch
that
terminated
tells
target
terminators
terminator
termination
thank
to
this
them
their
these
then
there
thing
they
things
time
three
those
thorough
timing
total
touch
type
trouble
try
traditional
tree
two
zip
vendor
using
useful
use
types
under
unlocks
used
users
uses
usually
would
version
were
way
versions
want
wall
wants
well
will
what
when
where
which
while
with
wiring
work
workaround
your
you
zoom
spelling
]0;sanjeevirao_mp@cobra:~/CSC245/Prog3[sanjeevirao_mp@cobra Prog3]$ exit
exit

Script done on Mon 01 Apr 2024 03:54:07 PM EDT
